pdf_value <- pdf_student_t(ip_subset$growthrate, d = opt_m, l =    opt_s, v = opt_df)
# Perform your tests (replace with actual test code)
cvm_test <-cvm.test(ip_subset$growthrate, pdf_student_t)
ks_test <-ks_test(ip_subset$growthrate, pdf_student_t)
ad_test <- ad_test(ip_subset$growthrate, pdf_student_t)
new_row <- data.frame(
LOCATION = loc,
CVM_Statistic = cvm_test$statistic,
CVM_P_Value = cvm_test$p.value,
KS_Statistic = ks_test$statistic,
KS_P_Value = ks_test$p.value,
AD_Statistic = ad_test$statistic,
AD_P_Value = ad_test$p.value,
stringsAsFactors = FALSE
)
results_df <- rbind(results_df, new_row)
}, error = function(e) {
print(paste("Error encountered for location:", loc))
print(e)
})
}
# Initialize a new data frame to store goodness-of-fit test results
test_results_df <- data.frame(
LOCATION = character(),
CVM_Statistic = numeric(),
CVM_P_Value = numeric(),
KS_Statistic = numeric(),
KS_P_Value = numeric(),
AD_Statistic = numeric(),
AD_P_Value = numeric(),
stringsAsFactors = FALSE
)
# Loop over each unique location
for (loc in unique(ip$LOCATION)) {
# Subset the data for the current location
ip_subset <- subset(ip, LOCATION == loc)
# Retrieve the optimized parameters from the results_df
opt_params <- subset(results_df, location == loc)
opt_m = opt_params$opt_m
opt_s = opt_params$opt_s
opt_df = opt_params$opt_df  # Assuming this corresponds to 'v'
tryCatch({
# Perform goodness-of-fit tests using your custom PDF
cvm_test <- cvm.test(ip_subset$growthrate, pdf_student_t, opt_m, opt_s, opt_df)
ks_test <- ks.test(ip_subset$growthrate, pdf_student_t, opt_m, opt_s, opt_df)
ad_test <- ad.test(ip_subset$growthrate, pdf_student_t, opt_m, opt_s, opt_df)
# Create a new row for results
new_row <- data.frame(
LOCATION = loc,
CVM_Statistic = cvm_test$statistic,
CVM_P_Value = cvm_test$p.value,
KS_Statistic = ks_test$statistic,
KS_P_Value = ks_test$p.value,
AD_Statistic = ad_test$statistic,
AD_P_Value = ad_test$p.value,
stringsAsFactors = FALSE
)
# Append the new row to the test results dataframe
test_results_df <- rbind(test_results_df, new_row)
}, error = function(e) {
print(paste("Error encountered for location:", loc))
print(e)
})
}
# Initialize a new data frame to store goodness-of-fit test results
test_results_df <- data.frame(
LOCATION = character(),
CVM_Statistic = numeric(),
CVM_P_Value = numeric(),
KS_Statistic = numeric(),
KS_P_Value = numeric(),
AD_Statistic = numeric(),
AD_P_Value = numeric(),
stringsAsFactors = FALSE
)
# Loop over each unique location
for (loc in unique(ip$LOCATION)) {
# Subset the data for the current location
ip_subset <- subset(ip, LOCATION == loc)
# Retrieve the optimized parameters from the results_df
opt_params <- subset(results_df, results_df$location == loc)
opt_m = opt_params$opt_m
opt_s = opt_params$opt_s
opt_df = opt_params$opt_df  # Assuming this corresponds to 'v'
tryCatch({
# Perform goodness-of-fit tests using your custom PDF
cvm_test <- cvm.test(ip_subset$growthrate, pdf_student_t, opt_m, opt_s, opt_df)
ks_test <- ks.test(ip_subset$growthrate, pdf_student_t, opt_m, opt_s, opt_df)
ad_test <- ad.test(ip_subset$growthrate, pdf_student_t, opt_m, opt_s, opt_df)
# Create a new row for results
new_row <- data.frame(
LOCATION = loc,
CVM_Statistic = cvm_test$statistic,
CVM_P_Value = cvm_test$p.value,
KS_Statistic = ks_test$statistic,
KS_P_Value = ks_test$p.value,
AD_Statistic = ad_test$statistic,
AD_P_Value = ad_test$p.value,
stringsAsFactors = FALSE
)
# Append the new row to the test results dataframe
test_results_df <- rbind(test_results_df, new_row)
}, error = function(e) {
print(paste("Error encountered for location:", loc))
print(e)
})
}
library(MASS)
fit2=fitdistr(ip_usa$growthrate, "t",
start = list(m = mean(ip_usa$growthrate), s = sd(ip_usa$growthrate), df = 3),
method = "L-BFGS-B",
lower = c(-3, 0.0001, 1),
upper = c(3, 3, 10))
objective_function <- function(params, data) {
d <- params[1]
l <- params[2]
v <- params[3]
log_density <- log(pdf_student_t(data, d, l, v))
return(-sum(log_density))}
optim(
par = c(d = fit2$estimate["m"], l = fit2$estimate["s"], v = fit2$estimate["df"]),  # use fitted values here
fn = objective_function,
data = ip_usa$growthrate,
method = "Nelder-Mead",
#lower = c(-3, 0.0001, 1),
#upper = c(3, 3, 30)
)
library(MASS)
fit2=fitdistr(ip_usa$growthrate, "t",
start = list(m = mean(ip_usa$growthrate), s = sd(ip_usa$growthrate), df = 3),
method = "L-BFGS-B",
lower = c(-3, 0.0001, 1),
upper = c(3, 3, 10))
objective_function <- function(params, data) {
d <- params[1]
l <- params[2]
v <- params[3]
log_density <- log(pdf_student_t(data, d, l, v))
return(-sum(log_density))}
optim(
par = c(d = fit2$estimate["m"], l = fit2$estimate["s"], v = fit2$estimate["df"]),  # use fitted values here
fn = objective_function,
data = ip_usa$growthrate,
method = "Nelder-Mead",
#lower = c(-3, 0.0001, 1),
#upper = c(3, 3, 30)
)
pcustom_student_t <- function(x, d, l, v) {
sapply(x, function(x_i) {
integrate(function(u) pdf_student_t(u, d, l, v), -Inf, x_i)$value
})
}
# Step 2: Create a custom function capturing the parameters
cdf_student_t<- function(x) {
pcustom_student_t(x,
d = fit$estimate['d'],
l = fit$estimate['l'],
v = fit$estimate['v'])
# Debug code
if (any(is.na(log_density))) {
print(paste("NaNs produced with parameters d:", d, "l:", l, "v:", v))
}
return(-sum(log_density))
}
# Initialize a new data frame to store goodness-of-fit test results
test_results_df <- data.frame(
LOCATION = character(),
CVM_Statistic = numeric(),
CVM_P_Value = numeric(),
KS_Statistic = numeric(),
KS_P_Value = numeric(),
AD_Statistic = numeric(),
AD_P_Value = numeric(),
stringsAsFactors = FALSE
)
# Loop over each unique location
for (loc in unique(ip$LOCATION)) {
# Subset the data for the current location
ip_subset <- subset(ip, LOCATION == loc)
# Retrieve the optimized parameters from the results_df
opt_params <- subset(results_df, results_df$location == loc)
opt_m = opt_params$opt_m
opt_s = opt_params$opt_s
opt_df = opt_params$opt_df  # Assuming this corresponds to 'v'
tryCatch({
# Perform goodness-of-fit tests using your custom PDF
cvm_test <- cvm.test(ip_subset$growthrate, pdf_student_t, opt_m, opt_s, opt_df)
ks_test <- ks.test(ip_subset$growthrate, pdf_student_t, opt_m, opt_s, opt_df)
ad_test <- ad.test(ip_subset$growthrate, pdf_student_t, opt_m, opt_s, opt_df)
# Create a new row for results
new_row <- data.frame(
LOCATION = loc,
CVM_Statistic = cvm_test$statistic,
CVM_P_Value = cvm_test$p.value,
KS_Statistic = ks_test$statistic,
KS_P_Value = ks_test$p.value,
AD_Statistic = ad_test$statistic,
AD_P_Value = ad_test$p.value,
stringsAsFactors = FALSE
)
# Append the new row to the test results dataframe
test_results_df <- rbind(test_results_df, new_row)
}, error = function(e) {
print(paste("Error encountered for location:", loc))
print(e)
})
}
# Initialize a results data frame to collect test statistics and p-values
results_df <- data.frame()
# Loop over unique locations
unique_locations <- unique(ip$LOCATION)
for (loc in unique_locations) {
# Filter the data by location
ip_subset <- subset(ip, LOCATION == loc)
# Assuming you've already optimized these parameters for each location
opt_result <- optim(
par = c(d = mean(ip_subset$growthrate), l = sd(ip_subset$growthrate), v = 3),
fn = objective_function,
data = ip_subset$growthrate,
method = "Nelder-Mead"
)
opt_m = opt_result$par[1]
opt_s = opt_result$par[2]
opt_df = opt_result$par[3]
# Define the custom PDF function with optimized parameters
custom_pdf_function <- function(x) {
pdf_student_t(x, d = opt_m, l = opt_s, v = opt_df)
}
# Perform goodness-of-fit tests using the custom PDF function
cvm_test <- cvm.test(ip_subset$growthrate, custom_pdf_function)
ks_test <- ks.test(ip_subset$growthrate, custom_pdf_function)
ad_test <- ad.test(ip_subset$growthrate, custom_pdf_function)
# Create a new row for the results
new_row <- data.frame(
LOCATION = loc,
CVM_Statistic = cvm_test$statistic,
CVM_P_Value = cvm_test$p.value,
KS_Statistic = ks_test$statistic,
KS_P_Value = ks_test$p.value,
AD_Statistic = ad_test$statistic,
AD_P_Value = ad_test$p.value,
stringsAsFactors = FALSE
)
# Append the new row to the results data frame
results_df <- rbind(results_df, new_row)
}
pdf_student_t <- function(x, d, l, v) {
# Calculate the Gamma function terms
gamma_term1 <- gamma((v + 1) / 2)
gamma_term2 <- gamma(v / 2)
# Calculate the constant in front of the formula
constant <- gamma_term1 / (sqrt(v * pi) *d* gamma_term2)
# Calculate the main expression
main_expr <- (1 + ((v^-1) * ((x - l) / d)^2))^(-((v + 1) / 2))
# Calculate the full PDF value
pdf_value <- constant * main_expr
# Debug lines:
print(paste("d =", d, ", l =", l, ", v =", v))
print(paste("gamma_term1 =", gamma_term1, ", gamma_term2 =", gamma_term2))
print(paste("constant =", constant))
return(pdf_value)
}
pcustom_student_t <- function(x, d, l, v) {
sapply(x, function(x_i) {
integrate(function(u) pdf_student_t(u, d, l, v), -Inf, x_i)$value
})
}
# Step 2: Create a custom function capturing the parameters
cdf_student_t<- function(x) {
pcustom_student_t(x,
d = fit$estimate['d'],
l = fit$estimate['l'],
v = fit$estimate['v'])
# Debug code
if (any(is.na(log_density))) {
print(paste("NaNs produced with parameters d:", d, "l:", l, "v:", v))
}
return(-sum(log_density))
}
library(MASS)
fit2=fitdistr(ip_usa$growthrate, "t",
start = list(m = mean(ip_usa$growthrate), s = sd(ip_usa$growthrate), df = 3),
method = "L-BFGS-B",
lower = c(-3, 0.0001, 1),
upper = c(3, 3, 10))
objective_function <- function(params, data) {
d <- params[1]
l <- params[2]
v <- params[3]
log_density <- log(pdf_student_t(data, d, l, v))
return(-sum(log_density))}
optim(
par = c(d = fit2$estimate["m"], l = fit2$estimate["s"], v = fit2$estimate["df"]),  # use fitted values here
fn = objective_function,
data = ip_usa$growthrate,
method = "Nelder-Mead",
#lower = c(-3, 0.0001, 1),
#upper = c(3, 3, 30)
)
pcustom_student_t <- function(x, d, l, v) {
sapply(x, function(x_i) {
integrate(function(u) pdf_student_t(u, d, l, v), -Inf, x_i)$value
})
}
# Step 2: Create a custom function capturing the parameters
cdf_student_t<- function(x) {
pcustom_student_t(x,
d = fit$estimate['d'],
l = fit$estimate['l'],
v = fit$estimate['v'])
# Debug code
if (any(is.na(log_density))) {
print(paste("NaNs produced with parameters d:", d, "l:", l, "v:", v))
}
return(-sum(log_density))
}
library(MASS)
fit2=fitdistr(ip_usa$growthrate, "t",
start = list(m = mean(ip_usa$growthrate), s = sd(ip_usa$growthrate), df = 3),
method = "L-BFGS-B",
lower = c(-3, 0.0001, 1),
upper = c(3, 3, 10))
objective_function <- function(params, data) {
d <- params[1]
l <- params[2]
v <- params[3]
log_density <- log(pdf_student_t(data, d, l, v))
return(-sum(log_density))}
optim(
par = c(d = fit2$estimate["m"], l = fit2$estimate["s"], v = fit2$estimate["df"]),  # use fitted values here
fn = objective_function,
data = ip_usa$growthrate,
method = "Nelder-Mead",
#lower = c(-3, 0.0001, 1),
#upper = c(3, 3, 30)
)
pdf_student_t <- function(x, d, l, v) {
# Calculate the Gamma function terms
gamma_term1 <- gamma((v + 1) / 2)
gamma_term2 <- gamma(v / 2)
# Calculate the constant in front of the formula
constant <- gamma_term1 / (sqrt(v * pi) *d* gamma_term2)
# Calculate the main expression
main_expr <- (1 +   ((x - l) /( d*v))^2)^(-((v + 1) / 2))
# Calculate the full PDF value
pdf_value <- constant * main_expr
# Debug lines:
print(paste("d =", d, ", l =", l, ", v =", v))
print(paste("gamma_term1 =", gamma_term1, ", gamma_term2 =", gamma_term2))
print(paste("constant =", constant))
return(pdf_value)
}
pcustom_student_t <- function(x, d, l, v) {
sapply(x, function(x_i) {
integrate(function(u) pdf_student_t(u, d, l, v), -Inf, x_i)$value
})
}
# Step 2: Create a custom function capturing the parameters
cdf_student_t<- function(x) {
pcustom_student_t(x,
d = fit$estimate['d'],
l = fit$estimate['l'],
v = fit$estimate['v'])
# Debug code
if (any(is.na(log_density))) {
print(paste("NaNs produced with parameters d:", d, "l:", l, "v:", v))
}
return(-sum(log_density))
}
pcustom_student_t <- function(x, d, l, v) {
sapply(x, function(x_i) {
integrate(function(u) pdf_student_t(u, d, l, v), -Inf, x_i)$value
})
}
# Step 2: Create a custom function capturing the parameters
cdf_student_t<- function(x) {
pcustom_student_t(x,
d = fit$estimate['d'],
l = fit$estimate['l'],
v = fit$estimate['v'])
# Debug code
return(-sum(log_density))
}
library(MASS)
fit2=fitdistr(ip_usa$growthrate, "t",
start = list(m = mean(ip_usa$growthrate), s = sd(ip_usa$growthrate), df = 3),
method = "L-BFGS-B",
lower = c(-3, 0.0001, 1),
upper = c(3, 3, 10))
objective_function <- function(params, data) {
d <- params[1]
l <- params[2]
v <- params[3]
log_density <- log(pdf_student_t(data, d, l, v))
return(-sum(log_density))}
optim(
par = c(d = fit2$estimate["m"], l = fit2$estimate["s"], v = fit2$estimate["df"]),  # use fitted values here
fn = objective_function,
data = ip_usa$growthrate,
method = "Nelder-Mead",
#lower = c(-3, 0.0001, 1),
#upper = c(3, 3, 30)
)
# Initialize a results data frame to collect test statistics and p-values
results_df <- data.frame()
# Loop over unique locations
unique_locations <- unique(ip$LOCATION)
for (loc in unique_locations) {
# Filter the data by location
ip_subset <- subset(ip, LOCATION == loc)
# Perform optimization
opt_result <- optim(
par = c(d = mean(ip_subset$growthrate), l = sd(ip_subset$growthrate), v = 3),
fn = objective_function,
data = ip_subset$growthrate,
method = "Nelder-Mead"
)
opt_m = opt_result$par[1]
opt_s = opt_result$par[2]
opt_df = opt_result$par[3]
# Initialize variables to hold the statistic and p-value
cvm_stat <- cvm_pval <- ks_stat <- ks_pval <- ad_stat <- ad_pval <- NA
tryCatch({
# Define custom PDF function with optimized parameters
custom_pdf_function <- function(x) {
pdf_student_t(x, d = opt_m, l = opt_s, v = opt_df)
}
# Perform goodness-of-fit tests using the custom PDF function
cvm_test <- cvm.test(ip_subset$growthrate, custom_pdf_function)
ks_test <- ks.test(ip_subset$growthrate, custom_pdf_function)
ad_test <- ad.test(ip_subset$growthrate, custom_pdf_function)
cvm_stat <- cvm_test$statistic
cvm_pval <- cvm_test$p.value
ks_stat <- ks_test$statistic
ks_pval <- ks_test$p.value
ad_stat <- ad_test$statistic
ad_pval <- ad_test$p.value
}, warning = function(w) {
}, error = function(e) {
})
# Create a new row for the results
new_row <- data.frame(
LOCATION = loc,
CVM_Statistic = cvm_stat,
CVM_P_Value = cvm_pval,
KS_Statistic = ks_stat,
KS_P_Value = ks_pval,
AD_Statistic = ad_stat,
AD_P_Value = ad_pval,
stringsAsFactors = FALSE
)
# Append the new row to the results data frame
results_df <- rbind(results_df, new_row)
}
# View the collected results
print(results_df)
# Initialize a results data frame to collect parameter estimates
param_df <- data.frame()
# Initialize a results data frame to collect test statistics and p-values
results_df <- data.frame()
# Loop over unique locations
unique_locations <- unique(ip$LOCATION)
for (loc in unique_locations) {
# Filter the data by location
ip_subset <- subset(ip, LOCATION == loc)
# Perform optimization to get the parameters
opt_result <- optim(
par = c(d = mean(ip_subset$growthrate), l = sd(ip_subset$growthrate), v = 3),
fn = objective_function,
data = ip_subset$growthrate,
method = "Nelder-Mead"
)
# Store parameter estimates in a new row
param_row <- data.frame(
location = loc,
opt_m = opt_result$par[1],
opt_s = opt_result$par[2],
opt_df = opt_result$par[3],
stringsAsFactors = FALSE
)
# Append the new row to the parameter data frame
param_df <- rbind(param_df, param_row)
# Define custom PDF function with optimized parameters
custom_pdf_function <- function(x) {
pdf_student_t(x, d = opt_result$par[1], l = opt_result$par[2], v = opt_result$par[3])
}
# Perform goodness-of-fit tests
cvm_test <- cvm.test(ip_subset$growthrate, custom_pdf_function)
ks_test <- ks.test(ip_subset$growthrate, custom_pdf_function)
ad_test <- ad.test(ip_subset$growthrate, custom_pdf_function)
# Extract test results
cvm_stat = cvm_test$statistic
cvm_pval = cvm_test$p.value
ks_stat = ks_test$statistic
ks_pval = ks_test$p.value
ad_stat = ad_test$statistic
ad_pval = ad_test$p.value
# Store test results in a new row
test_row <- data.frame(
LOCATION = loc,
CVM_Statistic = cvm_stat,
CVM_P_Value = cvm_pval,
KS_Statistic = ks_stat,
KS_P_Value = ks_pval,
AD_Statistic = ad_stat,
AD_P_Value = ad_pval,
stringsAsFactors = FALSE
)
# Append the new row to the results data frame
results_df <- rbind(results_df, test_row)
}
View(test_results_df)
